#Использовать "../Макеты"

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает шаблон конфигурации 1С для создания нового хранилища 1С
//
//  Возвращаемое значение:
//   Строка - шаблон конфигурации 1С в BASE64
//
Функция ШаблонКонфигурацииДляХранилища() Экспорт
	
	ПутьКШаблону = ПолучитьМакет("ШаблонКонфигурацииДляХранилища");
	Содержимое = СодержимоеИзФайла(ПутьКШаблону);
	Возврат Содержимое;
	
КонецФункции

// Хеширует строку по "стандартам" хеширования хранилища 1С.
// Метод используется для хеширования паролей пользователей хранилищ 1С.
//
// Параметры:
//   ВходящееЗначение - Строка - значениие для хеширования
//
//  Возвращаемое значение:
//   Строка - хешированная строка
//
Функция ХешированныйПароль(Знач ВходящееЗначение) Экспорт
	Данные = ПолучитьДвоичныеДанныеИзСтроки(ВходящееЗначение, КодировкаТекста.UTF16, Ложь);
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Данные);
	Возврат НРег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));
КонецФункции

// Получает номер версии сервера хранилища из ответа сервера
//
// Параметры:
//   ОтветСервера - Строка - ответ сервера хранилища
//
//  Возвращаемое значение:
//   Строка - номер версии сервера хранилища
//
Функция ВерсияСервераХранилища(Знач ОтветСервера) Экспорт

	Шаблон = "(?:версия|version).*?([1-9]{1}\.\d{1}\.\d{1,3}\.\d{1,5})";
	РВ = Новый РегулярноеВыражение(Шаблон);
	Совпадения = РВ.НайтиСовпадения(ОтветСервера);

	Если Совпадения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Совпадения[0].Группы[1].Значение;

КонецФункции // ВерсияСервераХранилища()

// Получает значение свойства из входящих данных по имени
//
// Параметры:
//	ВходящиеДанные     - Соответствие     - данные (результат чтения XML-сообщения обмена с сервером хранилища)
//                                          из которых выполняется чтение свойства
//	ИмяСвойства        - Строка           - имя читаемого свойствами
//
// Возвращаемое значение:
//	Строка, Число      - значение свойства
//
Функция ЗначениеСвойства(ВходящиеДанные, ИмяСвойства) Экспорт
	Возврат ВходящиеДанные[ИмяСвойства]._Атрибуты["value"];
КонецФункции // ЗначениеСвойства()

// Преобразует значение в тип Булево
//
// Параметры:
//	ВходящееЗначение     - Строка     - значение для преобразования
//
// Возвращаемое значение:
//	Булево      - результат преобразования
//
Функция ВычислитьБулево(Знач ВходящееЗначение) Экспорт
	Возврат НРег(ВходящееЗначение) = "true";
КонецФункции // ВычислитьБулево()

// Преобразует значение в тип Дата
//
// Параметры:
//	ВходящееЗначение     - Строка     - значение для преобразования
//
// Возвращаемое значение:
//	Дата      - результат преобразования
//
Функция ВычислитьДату(Знач ВходящееЗначение) Экспорт
	Возврат ПрочитатьДатуJSON(ВходящееЗначение + "Z", ФорматДатыJSON.ISO);
КонецФункции // ВычислитьДату()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СодержимоеИзФайла(ПутьКФайлу)
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	Возврат Текст;
КонецФункции

#КонецОбласти